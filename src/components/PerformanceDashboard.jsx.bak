'use client';

import { usePerformanceData, usePerformanceAlerts, exportPerformanceData } from '../hooks/usePerformanceData';
import React, { useState, useEffect, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';
import { TrendingUp, TrendingDown, DollarSign, Eye, MousePointer, Users, Calendar, Filter, Download } from 'lucide-react';

// Mock data - substitua pela integração com Supabase
const mockCampaignData = [
  {
    id: '1',
    name: 'Test Drive Campanha A',
    status: 'ACTIVE',
    spend: 1500.50,
    impressions: 45000,
    clicks: 1200,
    leads: 85,
    date_start: '2025-05-01',
    date_stop: '2025-05-26',
    daily_data: [
      { date: '2025-05-20', spend: 120, impressions: 3500, clicks: 95, leads: 7 },
      { date: '2025-05-21', spend: 135, impressions: 3800, clicks: 102, leads: 8 },
      { date: '2025-05-22', spend: 145, impressions: 4100, clicks: 115, leads: 9 },
      { date: '2025-05-23', spend: 110, impressions: 3200, clicks: 88, leads: 6 },
      { date: '2025-05-24', spend: 125, impressions: 3600, clicks: 98, leads: 7 },
      { date: '2025-05-25', spend: 140, impressions: 3900, clicks: 108, leads: 8 },
      { date: '2025-05-26', spend: 130, impressions: 3700, clicks: 100, leads: 7 }
    ]
  },
  {
    id: '2',
    name: 'Lead Gen Campanha B',
    status: 'ACTIVE',
    spend: 2200.75,
    impressions: 65000,
    clicks: 1800,
    leads: 120,
    date_start: '2025-05-01',
    date_stop: '2025-05-26',
    daily_data: [
      { date: '2025-05-20', spend: 180, impressions: 5200, clicks: 145, leads: 11 },
      { date: '2025-05-21', spend: 165, impressions: 4800, clicks: 135, leads: 9 },
      { date: '2025-05-22', spend: 190, impressions: 5500, clicks: 155, leads: 12 },
      { date: '2025-05-23', spend: 170, impressions: 4900, clicks: 140, leads: 10 },
      { date: '2025-05-24', spend: 185, impressions: 5300, clicks: 150, leads: 11 },
      { date: '2025-05-25', spend: 175, impressions: 5100, clicks: 142, leads: 10 },
      { date: '2025-05-26', spend: 160, impressions: 4600, clicks: 130, leads: 9 }
    ]
  },
  {
    id: '3',
    name: 'Retargeting Campanha C',
    status: 'PAUSED',
    spend: 890.25,
    impressions: 28000,
    clicks: 750,
    leads: 45,
    date_start: '2025-05-01',
    date_stop: '2025-05-20',
    daily_data: [
      { date: '2025-05-15', spend: 95, impressions: 2800, clicks: 75, leads: 4 },
      { date: '2025-05-16', spend: 88, impressions: 2600, clicks: 70, leads: 4 },
      { date: '2025-05-17', spend: 102, impressions: 3100, clicks: 82, leads: 5 },
      { date: '2025-05-18', spend: 91, impressions: 2700, clicks: 73, leads: 4 },
      { date: '2025-05-19', spend: 97, impressions: 2900, clicks: 78, leads: 5 },
      { date: '2025-05-20', spend: 85, impressions: 2500, clicks: 67, leads: 3 }
    ]
  }
];

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

export default function PerformanceDashboard() {
  const [campaigns, setCampaigns] = useState(mockCampaignData);
  const [dateRange, setDateRange] = useState('7d');
  const [selectedMetric, setSelectedMetric] = useState('spend');
  const [statusFilter, setStatusFilter] = useState('all');

  // Filtrar campanhas baseado no status
  const filteredCampaigns = useMemo(() => {
    if (statusFilter === 'all') return campaigns;
    return campaigns.filter(campaign => campaign.status === statusFilter);
  }, [campaigns, statusFilter]);

  // Calcular métricas agregadas
  const aggregatedMetrics = useMemo(() => {
    const totals = filteredCampaigns.reduce((acc, campaign) => ({
      spend: acc.spend + campaign.spend,
      impressions: acc.impressions + campaign.impressions,
      clicks: acc.clicks + campaign.clicks,
      leads: acc.leads + campaign.leads
    }), { spend: 0, impressions: 0, clicks: 0, leads: 0 });

    return {
      ...totals,
      cpm: totals.impressions > 0 ? (totals.spend / totals.impressions * 1000) : 0,
      ctr: totals.impressions > 0 ? (totals.clicks / totals.impressions * 100) : 0,
      cpc: totals.clicks > 0 ? (totals.spend / totals.clicks) : 0,
      cpl: totals.leads > 0 ? (totals.spend / totals.leads) : 0,
      conversionRate: totals.clicks > 0 ? (totals.leads / totals.clicks * 100) : 0
    };
  }, [filteredCampaigns]);

  // Preparar dados para gráfico de tendência
  const trendData = useMemo(() => {
    const dateMap = new Map();
    
    filteredCampaigns.forEach(campaign => {
      campaign.daily_data.forEach(day => {
        const existing = dateMap.get(day.date) || { date: day.date, spend: 0, impressions: 0, clicks: 0, leads: 0 };
        dateMap.set(day.date, {
          date: day.date,
          spend: existing.spend + day.spend,
          impressions: existing.impressions + day.impressions,
          clicks: existing.clicks + day.clicks,
          leads: existing.leads + day.leads
        });
      });
    });

    return Array.from(dateMap.values()).sort((a, b) => new Date(a.date) - new Date(b.date));
  }, [filteredCampaigns]);

  // Preparar dados para gráfico de barras (por campanha)
  const campaignComparisonData = filteredCampaigns.map(campaign => ({
    name: campaign.name.length > 20 ? campaign.name.substring(0, 20) + '...' : campaign.name,
    spend: campaign.spend,
    leads: campaign.leads,
    cpl: campaign.leads > 0 ? campaign.spend / campaign.leads : 0
  }));

  // Preparar dados para gráfico de pizza (distribuição de gastos)
  const spendDistribution = filteredCampaigns.map(campaign => ({
    name: campaign.name.length > 15 ? campaign.name.substring(0, 15) + '...' : campaign.name,
    value: campaign.spend
  }));

  const formatCurrency = (value) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  const formatNumber = (value) => {
    return new Intl.NumberFormat('pt-BR').format(value);
  };

  const MetricCard = ({ title, value, icon: Icon, trend, format = 'number' }) => {
    const formattedValue = format === 'currency' ? formatCurrency(value) :
                          format === 'percentage' ? `${value.toFixed(2)}%` :
                          formatNumber(Math.round(value));

    return (
      <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900">{formattedValue}</p>
          </div>
          <div className="h-12 w-12 bg-blue-50 rounded-lg flex items-center justify-center">
            <Icon className="h-6 w-6 text-blue-600" />
          </div>
        </div>
        {trend && (
          <div className="mt-4 flex items-center">
            {trend > 0 ? (
              <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
            ) : (
              <TrendingDown className="h-4 w-4 text-red-500 mr-1" />
            )}
            <span className={`text-sm ${trend > 0 ? 'text-green-500' : 'text-red-500'}`}>
              {Math.abs(trend).toFixed(1)}%
            </span>
            <span className="text-sm text-gray-500 ml-1">vs período anterior</span>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Dashboard de Performance</h1>
          <p className="text-gray-600">Acompanhe o desempenho das suas campanhas de Lead Ads</p>
        </div>

        {/* Filtros */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex items-center gap-2">
              <Filter className="h-5 w-5 text-gray-500" />
              <span className="text-sm font-medium text-gray-700">Filtros:</span>
            </div>
            
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Todos os Status</option>
              <option value="ACTIVE">Ativas</option>
              <option value="PAUSED">Pausadas</option>
            </select>

            <select
              value={dateRange}
              onChange={(e) => setDateRange(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="7d">Últimos 7 dias</option>
              <option value="30d">Últimos 30 dias</option>
              <option value="90d">Últimos 90 dias</option>
            </select>

            <button className="ml-auto flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
              <Download className="h-4 w-4" />
              Exportar Relatório
            </button>
          </div>
        </div>

        {/* Cards de Métricas */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <MetricCard
            title="Gasto Total"
            value={aggregatedMetrics.spend}
            icon={DollarSign}
            format="currency"
            trend={5.2}
          />
          <MetricCard
            title="Impressões"
            value={aggregatedMetrics.impressions}
            icon={Eye}
            trend={-2.1}
          />
          <MetricCard
            title="Cliques"
            value={aggregatedMetrics.clicks}
            icon={MousePointer}
            trend={8.7}
          />
          <MetricCard
            title="Leads"
            value={aggregatedMetrics.leads}
            icon={Users}
            trend={12.3}
          />
        </div>

        {/* Segunda linha de métricas */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <MetricCard
            title="CPM"
            value={aggregatedMetrics.cpm}
            icon={Eye}
            format="currency"
            trend={-1.5}
          />
          <MetricCard
            title="CTR"
            value={aggregatedMetrics.ctr}
            icon={MousePointer}
            format="percentage"
            trend={3.2}
          />
          <MetricCard
            title="CPC"
            value={aggregatedMetrics.cpc}
            icon={DollarSign}
            format="currency"
            trend={-4.1}
          />
          <MetricCard
            title="Custo por Lead"
            value={aggregatedMetrics.cpl}
            icon={Users}
            format="currency"
            trend={-6.8}
          />
        </div>

        {/* Gráficos */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Gráfico de Tendência */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Tendência de Performance</h3>
              <select
                value={selectedMetric}
                onChange={(e) => setSelectedMetric(e.target.value)}
                className="px-3 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="spend">Gasto</option>
                <option value="impressions">Impressões</option>
                <option value="clicks">Cliques</option>
                <option value="leads">Leads</option>
              </select>
            </div>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={trendData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="date" 
                  tickFormatter={(date) => new Date(date).toLocaleDateString('pt-BR', { month: 'short', day: 'numeric' })}
                />
                <YAxis />
                <Tooltip 
                  labelFormatter={(date) => new Date(date).toLocaleDateString('pt-BR')}
                  formatter={(value, name) => [
                    selectedMetric === 'spend' ? formatCurrency(value) : formatNumber(value),
                    selectedMetric === 'spend' ? 'Gasto' :
                    selectedMetric === 'impressions' ? 'Impressões' :
                    selectedMetric === 'clicks' ? 'Cliques' : 'Leads'
                  ]}
                />
                <Line 
                  type="monotone" 
                  dataKey={selectedMetric} 
                  stroke="#0088FE" 
                  strokeWidth={2}
                  dot={{ r: 4 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Distribuição de Gastos */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Distribuição de Gastos</h3>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={spendDistribution}
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                >
                  {spendDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => formatCurrency(value)} />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Comparação por Campanha */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance por Campanha</h3>
          <ResponsiveContainer width="100%" height={400}>
            <BarChart data={campaignComparisonData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis yAxisId="left" />
              <YAxis yAxisId="right" orientation="right" />
              <Tooltip 
                formatter={(value, name) => [
                  name === 'spend' ? formatCurrency(value) :
                  name === 'cpl' ? formatCurrency(value) :
                  formatNumber(value),
                  name === 'spend' ? 'Gasto' :
                  name === 'leads' ? 'Leads' : 'Custo por Lead'
                ]}
              />
              <Legend />
              <Bar yAxisId="left" dataKey="spend" fill="#0088FE" name="Gasto" />
              <Bar yAxisId="right" dataKey="leads" fill="#00C49F" name="Leads" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
}